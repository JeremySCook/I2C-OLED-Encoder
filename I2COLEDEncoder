/*********************************************************************
This is an example for our Monochrome OLEDs based on SSD1306 drivers

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/category/63_98

This example is for a 128x64 size display using I2C to communicate
3 pins are required to interface (2 I2C and one reset)

Adafruit invests time and resources providing this open source code, 
please support Adafruit and open-source hardware by purchasing 
products from Adafruit!

Written by Limor Fried/Ladyada  for Adafruit Industries.  
BSD license, check license.txt for more information
All text above, and the splash screen must be included in any redistribution
*********************************************************************/

//combined with code for I2C encoder to react to encoder value - very rough code
//but successfully tested on Arduino Uno 11/5/2018 - Jeremy S. Cook

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

//for encoder
#include "i2cEncoderLibV2.h"
const int IntPin = A3; /* Definition of the interrupt pin*/
//Class initialization with the I2C addresses
i2cEncoderLibV2 Encoder(0x00); /* In this case i'm using the I2C address 1, change according to your device*/


#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2


#define LOGO16_GLCD_HEIGHT 16 
#define LOGO16_GLCD_WIDTH  16 
static const unsigned char PROGMEM logo16_glcd_bmp[] =
{ B00000000, B11000000,
  B00000001, B11000000,
  B00000001, B11000000,
  B00000011, B11100000,
  B11110011, B11100000,
  B11111110, B11111000,
  B01111110, B11111111,
  B00110011, B10011111,
  B00011111, B11111100,
  B00001101, B01110000,
  B00011011, B10100000,
  B00111111, B11100000,
  B00111111, B11110000,
  B01111100, B11110000,
  B01110000, B01110000,
  B00000000, B00110000 };

#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

void setup()   {                
  Serial.begin(9600);

//setup for encoder
  pinMode(IntPin, INPUT);
  Encoder.begin(INT_DATA | WRAP_DISABLE | DIRE_LEFT | IPUP_ENABLE | RMOD_X1 | STD_ENCODER); // try also this!
  Encoder.writeCounter((int32_t)0); /* Reset the counter value */
  Encoder.writeMax((int32_t)10); /* Set the maximum threshold*/
  Encoder.writeMin((int32_t) - 10); /* Set the minimum threshold */
  Encoder.writeStep((int32_t)1); /* Set the step to 1*/
  Encoder.writeInterruptConfig(0xff); /* Enable all the interrupt */
  Encoder.writeAntibouncingPeriod(20);  /* Set an anti-bouncing of 200ms */
  Encoder.writeDoublePushPeriod(50);  /*Set a period for the double push of 500ms */  
  
  
//setup for screen
  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3C (for the 128x64)
  // init done
  // Show image buffer on the display hardware.
  // Since the buffer is intialized with an Adafruit splashscreen
  // internally, this will display the splashscreen.
  display.display();
  delay(1000);
}


void loop() {
//encoder
  uint8_t enc_cnt;
  if (digitalRead(IntPin) == LOW) {
    if ( Encoder.updateStatus()) {
      if ( Encoder.readStatus(RINC)) {
        Serial.print("Increment: ");
        Serial.println( Encoder.readCounterByte());

        /* Write here your code */
        
      }
      if ( Encoder.readStatus(RDEC)) {
        Serial.print("Decrement: ");
        Serial.println( Encoder.readCounterByte());
        
        /* Write here your code */
        
      }

      if ( Encoder.readStatus(RMAX)) {
        Serial.print("Maximum threshold: ");
        Serial.println( Encoder.readCounterByte());
        
        /* Write here your code */
        
      }

      if ( Encoder.readStatus(RMIN)) {
        Serial.print("Minimum threshold: ");
        Serial.println( Encoder.readCounterByte());
        
        /* Write here your code */
        
      }

      if ( Encoder.readStatus(PUSHR)) {
        Serial.println("Push button Released");
        
        /* Write here your code */
        
      }

      if ( Encoder.readStatus(PUSHP)) {
        Serial.println("Push button Pressed");
        
        /* Write here your code */
        
      }

      if ( Encoder.readStatus(PUSHD)) {
        Serial.println("Double push!");
        
        /* Write here your code */
      }
    }
  }
//display
  // Clear the buffer.
  display.clearDisplay();
  // draw scrolling text
  testscrolltext();
  delay(2000);
  display.clearDisplay();
  
}

void testscrolltext(void) {
  display.setTextSize(3);
  display.setTextColor(WHITE);
  display.setCursor(10,0);
  display.clearDisplay();
  display.print("Enc ");
  display.println( Encoder.readCounterByte());
  //Serial.print("Increment: ");
  //Serial.println( Encoder.readCounterByte());
  display.display();
  delay(1);
  display.startscrollright(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);
  display.startscrollleft(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);    
}
